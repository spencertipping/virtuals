sdocp('virtuals.sdoc', '#!/bin/bash\n\nCreates and manages virtual UML-based instances. The system is optimized to require minimal downloading (so you don\'t have to run Squid to cache the packages), and to create different\ntemplates for machine instances. It can also set up your local network tables to have the host computer act as a gateway for a virtual LAN. (It does this by default when you run a virtual\ninstance.)\n\nConfiguration and setup.\n\n  root=~/images\n  packages=module-init-tools,udev,aptitude,ifupdown,iproute,pump,nano,wget,netbase,adduser,sudo,openssh-server,git-core,iputils-ping\n\n  mkdir -p $root/{customizations,instances,versions}\n  if [[ ! -x $root/bootstrap ]]; then\n    echo error: an executable file called bootstrap should be present in $root.\n    exit 1\n  fi\n\nCommands.\nCommands are specified as ./virtuals <command> <arguments...>. They are:\n\n| download <version>\n  create <name> <version> [<customizations...>]\n  run <name> [<options...>]\n\n  function main() {\n    local command=$1\n    shift\n    $command "$@"\n  }\n\nDownloading.\nDownloads a version into a tarball. Really just a wrapper around debootstrap.\n\n  function download() {\n    local version=$1\n    local server=${2:-debian}\n\n    case $server in\n      debian) local url=\'http://ftp.us.debian.org/debian\' ;;\n      ubuntu) local url=\'http://us.archive.ubuntu.com/ubuntu\' ;;\n      *)      echo Unknown mirror: $server && exit 1 ;;\n    esac\n\n    sudo debootstrap --make-tarball=$root/versions/$version.tgz \\\n                     --include=$packages \\\n                       $version $root/versions/$version-directory $url\n  }\n\nCreating.\nCreates a fully installed instance from a version and an optional list of customizations. Customizations are just executable scripts that will be run as root, chrooted inside the new instance\ndirectory. For example, this would be a reasonable customization:\n\n| #!/bin/bash\n  aptitude -y install openssh-server\n\nIf this customization were installed as $root/customizations/ssh, then you would invoke create as \'create foo lenny ssh\' (optionally with more configurations following). Note that we always\ndrop a directory called \'/virtuals\' containing machine-specific information.\n\n  function create-fstab() {\n    local mountpoint=$1\n    sudo mknod --mode=600 $mountpoint/dev/ubd0 b 98 0\n    sudo chown root $mountpoint/dev/ubd0\n    sudo sh <<<"echo /dev/ubd0 /     ext3 defaults 0 1  > $mountpoint/etc/fstab"\n    sudo sh <<<"echo proc      /proc proc defaults 0 1 >> $mountpoint/etc/fstab"\n  }\n\n  function create-hostname() {\n    local mountpoint=$1\n    sudo sh <<<"echo $(< $mountpoint/virtuals/name) > $mountpoint/etc/hostname"\n  }\n\n  function create-initial-user() {\n    local mountpoint=$1\n    sudo chroot $mountpoint addgroup admin\n    sudo chroot $mountpoint adduser --ingroup admin $(whoami)\n    sudo sh <<<"echo \'%admin ALL=(ALL) ALL\' > $mountpoint/etc/sudoers"\n  }\n\n  function cleanup-persistent-net-generator() {\n    local mountpoint=$1\n    sudo rm -f $mountpoint/etc/udev/rules.d/*-persistent-net-generator.rules\n  }\n\n  function create() {\n    local name=$1\n    local version=$2\n    shift\n    shift\n\n    [[ -d $root/instances/$name ]] && sudo rm -rf $root/instances/$name\n    mkdir -p $root/instances/$name/mount-point\n\n    sudo dd bs=1M seek=2048 count=1 if=/dev/zero of=$root/instances/$name/disk\n    sudo mkfs.ext3 -F $root/instances/$name/disk\n    sudo mount -o loop -t ext3 $root/instances/$name/disk $root/instances/$name/mount-point\n\n    sudo mkdir $root/instances/$name/mount-point/virtuals\n    sudo sh <<<"echo $name                                               > $root/instances/$name/mount-point/virtuals/name"\n    sudo sh <<<"echo $(whoami)                                           > $root/instances/$name/mount-point/virtuals/user"\n    sudo sh <<<"echo 192.168.254.$((10 + $(ls $root/instances | wc -l))) > $root/instances/$name/mount-point/virtuals/ip-address"\n    sudo debootstrap --include=$packages --variant=minbase --unpack-tarball=$root/versions/$version.tgz $version $root/instances/$name/mount-point || return $?\n\n    create-fstab                     $root/instances/$name/mount-point\n    create-hostname                  $root/instances/$name/mount-point\n    create-initial-user              $root/instances/$name/mount-point\n    cleanup-persistent-net-generator $root/instances/$name/mount-point\n\n    sudo cp $root/bootstrap $root/instances/$name/mount-point/virtuals/bootstrap\n    sudo ln -s $root/instances/$name/mount-point/virtuals/bootstrap $root/instances/$name/mount-point/etc/rc2.d/S99bootstrap\n\n    for script in "$@"; do\n      [[ -x $script ]] && sudo chroot $root/instances/$name/mount-point $root/customizations/$script\n    done\n\n    sudo umount $root/instances/$name/mount-point\n    sudo chown $(whoami) $root/instances/$name/disk\n  }\n\nRunning.\nPasses in a default set of networking options and by default uses 128MB of memory for the instance. You can also specify additional options for UML.\n\n  function run() {\n    local name=$1\n    shift\n\n    nat\n    linux ubd0=$root/instances/$name/disk \\\n           mem=128M umid=$name \\\n          eth0=tuntap,,,192.168.254.1 \\\n         xterm=terminator,-T,-x "$@"\n  }\n\nNAT initialization.\nSets up the host machine as a gateway that uses NAT to forward Internet-bound requests from the virtual LAN.\n\n  function nat() {\n    echo Reinitializing NAT...\n    local interface=$(route -en | grep \'^0.0.0.0\' | head -n1 | awk \'{print $8}\')\n    sudo iptables -F\n    sudo iptables -t nat -F\n    sudo iptables -X\n    sudo iptables -t nat -A POSTROUTING -o $interface -j MASQUERADE\n    echo Done\n  }\n\n  main "$@"\n');