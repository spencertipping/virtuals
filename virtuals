#!/bin/bash

# Creates and manages virtual UML-based instances. The system is optimized to require minimal downloading (so you don't have to run Squid to cache the packages), and to create different
# templates for machine instances. It can also set up your local network tables to have the host computer act as a gateway for a virtual LAN. (It does this by default when you run a virtual
# instance.)

# Configuration and setup.

  root=~/images
  packages=module-init-tools,udev,aptitude,ifupdown,iproute,pump,nano,wget,netbase,adduser,sudo,openssh-server

  mkdir -p $root/{customizations,instances,versions}
  if [[ ! -x $root/bootstrap ]]; then
    echo error: an executable file called bootstrap should be present in $root.
    exit 1
  fi

# Commands.
# Commands are specified as ./virtuals <command> <arguments...>. They are:

# | download <version>
#   create <name> <version> [<customizations...>]
#   run <name> [<options...>]
#   nat <interface>

  function main() {
    local command=$1
    shift
    $command "$@"
  }

# Downloading.
# Downloads a version into a tarball. Really just a wrapper around debootstrap.

  function download() {
    local version=$1
    local server=${2:-debian}

    case $server in
      debian) local url='http://ftp.us.debian.org/debian' ;;
      ubuntu) local url='http://us.archive.ubuntu.com/ubuntu' ;;
      *)      echo Unknown mirror: $server && exit 1 ;;
    esac

    sudo debootstrap --make-tarball=$root/versions/$version.tgz \
                     --include=$packages \
                       $version $root/versions/$version-directory $url
  }

# Creating.
# Creates a fully installed instance from a version and an optional list of customizations. Customizations are just executable scripts that will be run as root, chrooted inside the new instance
# directory. For example, this would be a reasonable customization:

# | #!/bin/bash
#   aptitude -y install openssh-server

# If this customization were installed as $root/customizations/ssh, then you would invoke create as 'create foo lenny ssh' (optionally with more configurations following). Note that we always
# drop a directory called '/virtuals' containing machine-specific information.

  function create-fstab() {
    local mountpoint=$1
    sudo mknod --mode=600 $mountpoint/dev/ubd0 b 98 0
    sudo chown root $mountpoint/dev/ubd0
    sudo sh <<<"echo /dev/ubd0 /     ext3 defaults 0 1  > $mountpoint/etc/fstab"
    sudo sh <<<"echo proc      /proc proc defaults 0 1 >> $mountpoint/etc/fstab"
  }

  function create-hostname() {
    local mountpoint=$1
    sudo sh <<<"echo $(< $mountpoint/virtuals/name) > $mountpoint/etc/hostname"
  }

  function create-initial-user() {
    local mountpoint=$1
    sudo chroot $mountpoint addgroup admin
    sudo chroot $mountpoint adduser --ingroup admin $(whoami)
    sudo sh <<<"echo '%admin ALL=(ALL) ALL' > $mountpoint/etc/sudoers"
  }

  function cleanup-persistent-net-generator() {
    local mountpoint=$1
    sudo rm -f $mountpoint/etc/udev/rules.d/*-persistent-net-generator.rules
  }

  function create() {
    local name=$1
    local version=$2
    shift
    shift

    [[ -d $root/instances/$name ]] && sudo rm -rf $root/instances/$name
    mkdir -p $root/instances/$name/mount-point

    sudo dd bs=1M seek=2048 count=1 if=/dev/zero of=$root/instances/$name/disk
    sudo mkfs.ext3 -F $root/instances/$name/disk
    sudo mount -o loop -t ext3 $root/instances/$name/disk $root/instances/$name/mount-point

    sudo mkdir $root/instances/$name/mount-point/virtuals
    sudo sh <<<"echo $name                                               > $root/instances/$name/mount-point/virtuals/name"
    sudo sh <<<"echo $(whoami)                                           > $root/instances/$name/mount-point/virtuals/user"
    sudo sh <<<"echo 192.168.254.$((10 + $(ls $root/instances | wc -l))) > $root/instances/$name/mount-point/virtuals/ip-address"
    sudo debootstrap --include=$packages --variant=minbase --unpack-tarball=$root/versions/$version.tgz $version $root/instances/$name/mount-point || return $?

    create-fstab                     $root/instances/$name/mount-point
    create-hostname                  $root/instances/$name/mount-point
    create-initial-user              $root/instances/$name/mount-point
    cleanup-persistent-net-generator $root/instances/$name/mount-point

    sudo cp $root/bootstrap $root/instances/$name/mount-point/virtuals/bootstrap
    sudo ln -s $root/instances/$name/mount-point/virtuals/bootstrap $root/instances/$name/mount-point/etc/rc2.d/S99bootstrap

    for script in "$@"; do
      [[ -x $script ]] && sudo chroot $root/instances/$name/mount-point $root/customizations/$script
    done

    sudo umount $root/instances/$name/mount-point
    sudo chown $(whoami) $root/instances/$name/disk
  }

# Running.
# Passes in a default set of networking options and by default uses 128MB of memory for the instance. You can also specify additional options for UML.

  function run() {
    local name=$1
    shift

    nat
    linux ubd0=$root/instances/$name/disk \
           mem=128M umid=$name \
          eth0=tuntap,,,192.168.254.1 \
         xterm=terminator,-T,-x "$@"
  }

# NAT initialization.
# Sets up the host machine as a gateway that uses NAT to forward Internet-bound requests from the virtual LAN.

  function nat() {
    echo Reinitializing NAT...
    local interface=$(route -en | grep '^0.0.0.0' | head -n1 | awk '{print $8}')
    sudo iptables -F
    sudo iptables -t nat -F
    sudo iptables -X
    sudo iptables -t nat -A POSTROUTING -o $interface -j MASQUERADE
    echo Done
  }

  main "$@"

# Generated by SDoc 
