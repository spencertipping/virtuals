#!/bin/bash

# Creates and manages virtual UML-based instances. The system is optimized to require minimal downloading (so you don't have to run Squid to cache the packages), and to create different
# templates for machine instances. It can also set up your local network tables to have the host computer act as a gateway for a virtual LAN. The only bad part is that you have to explicitly set
# the network adapter on the host; I hope to eliminate this lameness in the future.

# Configuration and setup.

  root=~/images
  mkdir -p $root/{customizations,instances,versions}

# Commands.
# Commands are specified as ./virtuals <command> <arguments...>. They are:

# | download <version>
#   create <name> <version> [<customizations...>]
#   run <name> [<options...>]
#   nat <interface>

  function main() {
    local command=$1
    shift
    $command "$@"
  }

# Downloading.
# Downloads a version into a tarball. Really just a wrapper around debootstrap.

  function download() {
    local version=$1
    local server=${2:-debian}

    case $server in
      debian) local url='http://ftp.us.debian.org/debian' ;;
      ubuntu) local url='http://us.archive.ubuntu.com/ubuntu' ;;
      *)      echo Unknown mirror: $server && exit 1 ;;
    esac

    sudo debootstrap --make-tarball=$root/versions/$version.tgz $version $root/versions/$version-directory $url
  }

# Creating.
# Creates a fully installed instance from a version and an optional list of customizations. Customizations are just executable scripts that will be run as root, chrooted inside the new instance
# directory. For example, this would be a reasonable customization:

# | #!/bin/bash
#   aptitude -y install openssh-server

# If this customization were installed as $root/customizations/ssh, then you would invoke create as 'create foo lenny ssh' (optionally with more configurations following).

  function create() {
    local name=$1
    local version=$2
    shift
    shift

    [[ -d $root/instances/$name ]] && sudo rm -rf $root/instances/$name
    mkdir -p $root/instances/$name/mount-point

    sudo dd bs=1M seek=2048 count=0 if=/dev/zero of=$root/instances/$name/disk
    sudo mkfs.ext3 $root/instances/$name/disk
    sudo mount -o loop -t ext3 $root/instances/$name/disk $root/instances/$name/mount-point
    sudo debootstrap --variant=minbase --unpack-tarball=$root/versions/$version.tgz $version $root/instances/$name/mount-point || return $?

    for script in "$@"; do
      [[ -x $script ]] && sudo chroot $root/instances/$name/mount-point $root/customizations/$script
    done

    sudo umount $root/instances/$name/mount-point
    sudo chown $(whoami) $root/instances/$name/disk
  }

# Running.
# Passes in a default set of networking options and by default uses 128MB of memory for the instance. You can also specify additional options for UML.

  function run() {
    local name=$1
    shift

    linux ubd0=$root/instances/$name/disk \
           mem=128M umid=$name \
          eth0=tuntap,,,192.168.254.1 \
         xterm=gnome-terminal,-t,-x "$@"
  }

  main "$@"

# Generated by SDoc 